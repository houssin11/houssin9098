# handlers/quiz.py
# "๐ฏ ุงูุญุฒุงุฒูุฑ (ุฑุจุญู)" ุจุฏูู ุนุฏูุงุฏ
# - ูุญุฐู ุฑุณุงูุฉ ุงูุณุคุงู ููุฑ ุงูุชูููู (ุตุญ/ุฎุทุฃ)
# - ุจุนุฏ ุงูุตุญ: ุฑุณุงูุฉ ูุฌุงุญ + ุฒุฑ โญ๏ธ ุงูุชุงูู (ูุฎุตู ุนูุฏ ุงูุนุฑุถ)
# - ุจุนุฏ ุงูุฎุทุฃ: ุฑุณุงูุฉ ุฎุทุฃ + ุฒุฑ ๐ ุฅุนุงุฏุฉ ุงููุญุงููุฉ (ูุฎุตู) + โธ๏ธ ุฃููู ูุงุญููุง
# - ุฒุฑ "๐ ููุงุทู" ูุธูุฑ ุงูููุงุท + ูุง ุชุนุงุฏู ุจุงูููุฑุฉ + ุฑุตูุฏ ุงููุญูุธุฉ
# - ุดุงุดุฉ ุงูููุฎูุต ุชุฏุนู ููุงูุฃุฉ ููุงุท ุฃู ููุฑุงุช (ุชููุงุฆููุง ุญุณุจ ูุฎุฑุฌุงุช ุงูุฎุฏูุฉ ุงูุญุงููุฉ)

from __future__ import annotations
import time

from telebot import TeleBot, types

from services.quiz_service import (
    # ุงูุชุตุงุฏ/ุญุงูุฉ
    load_settings, ensure_user_wallet, get_wallet, get_attempt_price,
    reset_progress, next_question, deduct_fee_for_stage, add_points,
    user_quiz_state, convert_points_to_balance, load_template, advance,
    get_points_value_syp, compute_stage_reward_and_finalize,
)

# ------------------------ ูุงุฌูุฉ ุงูุนุฑุถ ------------------------
def _question_text(stage_no: int, q_idx: int, item: dict) -> str:
    return (
        f"๐ฏ <b>ุงููุฑุญูุฉ {stage_no}</b> โ ุงูุณุคุงู <b>{q_idx+1}</b>\n\n"
        f"{item['text']}"
    )

def _question_markup(item: dict) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(*[
        types.InlineKeyboardButton(text=o, callback_data=f"quiz_ans:{i}")
        for i, o in enumerate(item["options"])
    ])
    kb.add(types.InlineKeyboardButton(text="๐ณ ุชุญููู ุงูููุงุท ุฅูู ุฑุตูุฏ", callback_data="quiz_convert"))
    kb.add(types.InlineKeyboardButton(text="โธ๏ธ ุฃููู ูุงุญููุง", callback_data="quiz_pause"))
    return kb

def _after_correct_markup() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="โญ๏ธ ุงูุชุงูู (ุณูุฎุตู ุนูุฏ ุงูุนุฑุถ)", callback_data="quiz_next"))
    kb.add(types.InlineKeyboardButton(text="โธ๏ธ ุฃููู ูุงุญููุง", callback_data="quiz_pause"))
    return kb

def _after_wrong_markup(price: int) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text=f"๐ ุฅุนุงุฏุฉ ุงููุญุงููุฉ (ุณููุฎุตู {price} ู.ุณ)", callback_data="quiz_retry"))
    kb.add(types.InlineKeyboardButton(text="โธ๏ธ ุฃููู ูุงุญููุง", callback_data="quiz_pause"))
    return kb

def _intro_text(stage_no: int, price: int, total_q: int, bal: int, pts: int, syp_val: int) -> str:
    return (
        "โน๏ธ <b>ุดุฑุญ ุณุฑูุน</b>\n"
        "โข ูค ุฎูุงุฑุงุช ููู ุณุคุงู.\n"
        "โข ุชูุฎุตู ูููุฉ <b>ุงููุญุงููุฉ ุงูุฃููู</b> ุนูุฏ ุงูุถุบุท ุนูู <i>ุงูุชุงูู</i> ุฃู <i>ุฅุนุงุฏุฉ ุงููุญุงููุฉ</i>.\n"
        "โข ุนูุฏ ุงูุฎุทุฃ ููุนุงุฏ ููุณ ุงูุณุคุงู (ูุน ุฎุตู ุฌุฏูุฏ ุนูุฏ ุงูุนุฑุถ).\n"
        "โข ูุง ุชูููุญ ููุฅุฌุงุจุฉ ุงูุตุญูุญุฉ.\n\n"
        f"ุงููุฑุญูุฉ: <b>{stage_no}</b> โ ุงูุฃุณุฆูุฉ: <b>{total_q}</b>\n"
        f"ุณุนุฑ ุงููุญุงููุฉ: <b>{price}</b> ู.ุณ\n"
        f"๐ฐ ุฑุตูุฏู: <b>{bal:,}</b> ู.ุณ โ ๐ ููุงุทู: <b>{pts}</b> (โ <b>{syp_val}</b> ู.ุณ)"
    )

def _intro_markup(resume: bool) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    if resume:
        kb.add(types.InlineKeyboardButton(text="โถ๏ธ ูุชุงุจุนุฉ", callback_data="quiz_resume"))
    kb.add(types.InlineKeyboardButton(text="๐ ุงุจุฏุฃ ุงูุขู", callback_data="quiz_next"))
    kb.add(
        types.InlineKeyboardButton(text="๐ ููุงุทู", callback_data="quiz_points"),
        types.InlineKeyboardButton(text="๐ณ ุชุญููู ุงูููุงุท", callback_data="quiz_convert"),
    )
    kb.add(types.InlineKeyboardButton(text="โน๏ธ ุดุฑุญ ุงููุนุจุฉ", callback_data="quiz_help"))
    kb.add(types.InlineKeyboardButton(text="โ ุฅูุบุงุก", callback_data="quiz_cancel"))
    return kb

def _delete_if_exists(bot: TeleBot, chat_id: int, msg_id: int | None):
    if not msg_id:
        return
    try:
        bot.delete_message(chat_id, msg_id)
    except Exception:
        # fallback: ุนุทูู ุงูุฃุฒุฑุงุฑ ุฅู ูุดู ุงูุญุฐู (ุฑุณุงูุฉ ูุฏููุฉุ ูุง ุตูุงุญูุฉุ ุฅูุฎ)
        try:
            bot.edit_message_reply_markup(chat_id, msg_id, reply_markup=None)
        except Exception:
            pass

# ------------------------ ุดุงุดุฉ ุชูููุฏ ------------------------
def _intro_screen(bot: TeleBot, chat_id: int, user_id: int, resume_only: bool = False):
    settings = load_settings()
    st = user_quiz_state.get(user_id, {}) or reset_progress(user_id)
    # ูุคุดุฑุงุช ุงููุฑุญูุฉ
    st.setdefault("stage_stars", 0)
    st.setdefault("stage_wrong_attempts", 0)
    st.setdefault("stage_done", 0)
    st.setdefault("attempts_on_current", 0)
    # ุชูุธูู ูุฑุงุฌุน ุงูุฑุณุงุฆู ุงูุณุงุจูุฉ
    st.pop("active_msg_id", None)
    st.pop("last_info_msg_id", None)
    st["last_click_ts"] = 0.0
    user_quiz_state[user_id] = st

    stage_no = int(st.get("stage", 1))
    tpl = load_template(st["template_id"])
    items = tpl.get("items_by_stage", {}).get(str(stage_no), []) or []
    q_count = len(items)
    price   = get_attempt_price(stage_no, settings)

    bal, pts = get_wallet(user_id)
    syp_val  = get_points_value_syp(pts, settings)

    resume_avail = (int(st.get("q_index", 0)) > 0 or bool(st.get("active_msg_id")))

    txt = _intro_text(stage_no, price, q_count, bal, pts, syp_val)
    kb = _intro_markup(resume=(resume_avail and not resume_only))
    bot.send_message(chat_id, txt, reply_markup=kb, parse_mode="HTML")

# ------------------------ ููุทุฉ ุงูุฏุฎูู ------------------------
def attach_handlers(bot: TeleBot):

    @bot.message_handler(func=lambda m: m.text == "๐ฏ ุงูุญุฒุงุฒูุฑ (ุฑุจุญู)")
    def quiz_home(msg):
        user_id = msg.from_user.id
        name = (msg.from_user.first_name or "").strip()
        ensure_user_wallet(user_id, name)
        # โณ๏ธ ูุง ูุนูุฏ ุถุจุท ุงูุชูุฏู ุชููุงุฆููุงุ ูููุฏุฑ ูููู ูุงุญููุง
        if not user_quiz_state.get(user_id):
            reset_progress(user_id)
        # ูุธูู ุฃู ุฑุณุงูุฉ ูุนูููุงุช ูุฏููุฉ ููุฎุฒูุฉ
        st = user_quiz_state.get(user_id, {})
        st.pop("last_info_msg_id", None)
        user_quiz_state[user_id] = st
        _intro_screen(bot, msg.chat.id, user_id)

    # --------------------------------------------
    # ุนุฑุถ ุงูุณุคุงู (ุฎุตู ูุณุจู) โ ููุณุชุฏุนู ูู: quiz_next / quiz_retry / quiz_resume
    # ูุญุงูู ุญุฐู ุงูุฑุณุงูุฉ ุงูุณุงุจูุฉ (ุณุคุงู/ูุชูุฌุฉ) ูุจู ุทุฑุญ ุงูุณุคุงู ุงูุฌุฏูุฏ
    # --------------------------------------------
    def _send_next_question(bot: TeleBot, chat_id: int, user_id: int,
                            delete_msg_ids: list[int] | None = None,
                            skip_deduct: bool = False) -> bool:
        st, item, stage_no, q_idx = next_question(user_id)

        # ุฎุตู ุงูุณุนุฑ ูุจู ุงูุฅุธูุงุฑ (ุฅูุง ูู ุญุงูุฉ ุงูุงุณุชุฆูุงู)
        if not skip_deduct:
            ok, new_bal, price = deduct_fee_for_stage(user_id, stage_no)
            if not ok:
                bal, _ = get_wallet(user_id)
                bot.send_message(
                    chat_id,
                    f"โ ุฑุตูุฏู ุบูุฑ ูุงูู ูุณุนุฑ ุงููุญุงููุฉ.\n"
                    f"ุงููุทููุจ: <b>{price}</b> ู.ุณ โ ุงููุชุงุญ: <b>{bal}</b> ู.ุณ",
                    parse_mode="HTML"
                )
                return False

        # ุงุญุฐู ุฃู ุฑุณุงุฆู ูุฏููุฉ (ุณุคุงู/ูุชูุฌุฉ) ูุจู ุทุฑุญ ุงูุณุคุงู ุงูุฌุฏูุฏ
        if delete_msg_ids:
            for mid in delete_msg_ids:
                _delete_if_exists(bot, chat_id, mid)

        # ุงุญุฐู ุฃูุถูุง ุงูุณุคุงู ุงููุดุท ุงูุณุงุจู ุฅู ููุฌุฏ
        _delete_if_exists(bot, chat_id, st.get("active_msg_id"))

        # ุฃุฑุณู ุงูุณุคุงู ุงูุฌุฏูุฏ
        txt = _question_text(stage_no, q_idx, item)
        sent = bot.send_message(chat_id, txt, parse_mode="HTML", reply_markup=_question_markup(item))

        # ุญุฏุซ ุงูุญุงูุฉ
        st["active_msg_id"] = sent.message_id
        st["started_at"]    = int(time.time() * 1000)
        user_quiz_state[user_id] = st
        return True

    # Debounce ููููุฑุงุช (1s)
    def _click_guard(user_id: int) -> bool:
        st = user_quiz_state.get(user_id, {}) or {}
        now = time.time()
        last = float(st.get("last_click_ts", 0.0))
        if now - last < 1.0:
            return True
        st["last_click_ts"] = now
        user_quiz_state[user_id] = st
        return False

    # --------------------------------------------
    # ุฃุฒุฑุงุฑ ุงูุชูุฏูู/ุงูุฅููุงู
    # --------------------------------------------
    @bot.callback_query_handler(func=lambda c: c.data in ("quiz_next", "quiz_retry", "quiz_resume"))
    def on_next_or_retry(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        try: bot.answer_callback_query(call.id)
        except: pass

        if _click_guard(user_id):
            return

        delete_ids = [call.message.message_id]
        # ุงูุงุณุชุฆูุงู ูุง ูุฎุตู (ูุนูุฏ ุฅุฑุณุงู ููุณ ุงูุณุคุงู ููู ูุงุชู ุงูุฑุณุงูุฉ)
        skip = (call.data == "quiz_resume")
        _send_next_question(bot, chat_id, user_id, delete_msg_ids=delete_ids, skip_deduct=skip)

    # ุงุฎุชูุงุฑ ุฌูุงุจ
    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("quiz_ans:"))
    def on_answer(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        try: bot.answer_callback_query(call.id)
        except: pass

        if _click_guard(user_id):
            return

        settings = load_settings()
        st, item, stage_no, q_idx = next_question(user_id)
        idx = int(call.data.split(":")[1])
        is_correct = (idx == int(item["correct_index"]))
        attempts_on_current = int(st.get("attempts_on_current", 0))

        # ุงุญุฐู ุฑุณุงูุฉ ุงูุณุคุงู ููุฑูุง
        _delete_if_exists(bot, chat_id, st.get("active_msg_id"))
        # ุงุญุฐู ุฑุณุงูุฉ ูุนูููุงุช ูุฏููุฉ ุฅู ููุฌุฏุช
        _delete_if_exists(bot, chat_id, st.get("last_info_msg_id"))
        st.pop("active_msg_id", None)
        st.pop("last_info_msg_id", None)

        if is_correct:
            # ุญุณุงุจ ุงููุฌูู ูุงูููุงุท
            stars_here = max(0, 3 - attempts_on_current)
            pmap = settings.get("points_per_stars", {"3": 3, "2": 2, "1": 1, "0": 0})
            award_pts = int(pmap.get(str(stars_here), stars_here))
            _, pts = add_points(user_id, award_pts)

            st["stage_stars"] = int(st.get("stage_stars", 0)) + stars_here
            st["stage_done"]  = int(st.get("stage_done", 0)) + 1
            st["attempts_on_current"] = 0
            user_quiz_state[user_id] = st

            # ูู ูุฐุง ุขุฎุฑ ุณุคุงู ูู ุงููุฑุญูุฉุ
            tpl = load_template(st["template_id"])
            items = tpl.get("items_by_stage", {}).get(str(stage_no), []) or []
            is_last_in_stage = (q_idx == len(items) - 1)

            # ุฑุณุงูุฉ ูุฌุงุญ + ุฒุฑ โญ๏ธ ุงูุชุงูู
            ok_msg = bot.send_message(
                chat_id,
                f"โ ุฅุฌุงุจุฉ ุตุญูุญุฉ! (+{award_pts} ููุงุท)\n"
                f"๐ ููุงุทู ุงูุขู: <b>{pts}</b>",
                parse_mode="HTML",
                reply_markup=_after_correct_markup()
            )
            st["last_info_msg_id"] = ok_msg.message_id
            user_quiz_state[user_id] = st

            # ุชูุฏูู ุจุงููุคุดุฑ (ุงูุนุฑุถ ุงููุนูู ุนูุฏ ุงูุถุบุท ุนูู ยซุงูุชุงููยป)
            advance(user_id)

            # ููุงูุฉ ูุฑุญูุฉ โ ููุฎุต ููุฑู (ุงูุฌุงุฆุฒุฉ ูุฏ ุชููู ููุงุท ุฃู ููุฑุงุช ุญุณุจ ุงูุฎุฏูุฉ ุงูุญุงููุฉ)
            if is_last_in_stage:
                summary = compute_stage_reward_and_finalize(user_id, stage_no, len(items))
                # ุฏุนู ููุชุงุญู points ุฃู syp
                reward_points = summary.get("reward_points")
                points_after  = summary.get("points_after")
                reward_syp    = summary.get("reward_syp")
                balance_after = summary.get("balance_after")

                if reward_points is not None:
                    bot.send_message(
                        chat_id,
                        "๐ <b>ููุฎุต ุงููุฑุญูุฉ</b>\n"
                        f"ุงููุฑุญูุฉ: <b>{stage_no}</b>\n"
                        f"ุงูุฃุณุฆูุฉ ุงูููุฌุฒุฉ: <b>{summary.get('questions', 0)}</b>\n"
                        f"ุงููุญุงููุงุช ุงูุฎุงุทุฆุฉ: <b>{summary.get('wrong_attempts', 0)}</b>\n"
                        f"ุงููุฌูู: <b>{summary.get('stars', 0)}</b>\n"
                        f"๐ ุงูุฌุงุฆุฒุฉ: <b>{reward_points}</b> ููุทุฉ\n"
                        f"๐ ููุงุทู ุงูุขู: <b>{points_after}</b>",
                        parse_mode="HTML"
                    )
                else:
                    # ุชุฑุงุฌุน ูุคูุชูุง ุนูู ุงููุณุฎุฉ ุงููุฏููุฉ (ุจุงูููุฑุฉ) ูุญูู ุชุนุฏูู ุงูุฎุฏูุฉ
                    bot.send_message(
                        chat_id,
                        "๐ <b>ููุฎุต ุงููุฑุญูุฉ</b>\n"
                        f"ุงููุฑุญูุฉ: <b>{stage_no}</b>\n"
                        f"ุงูุฃุณุฆูุฉ ุงูููุฌุฒุฉ: <b>{summary.get('questions', 0)}</b>\n"
                        f"ุงููุญุงููุงุช ุงูุฎุงุทุฆุฉ: <b>{summary.get('wrong_attempts', 0)}</b>\n"
                        f"ุงููุฌูู: <b>{summary.get('stars', 0)}</b>\n"
                        f"๐ ุงูุฌุงุฆุฒุฉ: <b>{reward_syp or 0}</b> ู.ุณ\n"
                        f"๐ฐ ุฑุตูุฏู ุงูุขู: <b>{balance_after or 0}</b> ู.ุณ",
                        parse_mode="HTML"
                    )

        else:
            # ุฎุทุฃ โ ุญุฏูุซ ุนุฏุงุฏุงุช ุงููุฑุญูุฉ
            st["stage_wrong_attempts"] = int(st.get("stage_wrong_attempts", 0)) + 1
            st["attempts_on_current"]  = attempts_on_current + 1
            user_quiz_state[user_id] = st

            price = get_attempt_price(stage_no, settings)
            wrong_msg = bot.send_message(
                chat_id,
                f"โ ุฅุฌุงุจุฉ ุฎุงุทุฆุฉ.\n"
                f"ุงุถุบุท ยซุฅุนุงุฏุฉ ุงููุญุงููุฉยป ูุฅุนุงุฏุฉ ููุณ ุงูุณุคุงู (ุณูุฎุตู <b>{price}</b> ู.ุณ).",
                parse_mode="HTML",
                reply_markup=_after_wrong_markup(price)
            )
            st["last_info_msg_id"] = wrong_msg.message_id
            user_quiz_state[user_id] = st

    # ุชุญููู ุงูููุงุท
    @bot.callback_query_handler(func=lambda c: c.data == "quiz_convert")
    def on_convert(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        try: bot.answer_callback_query(call.id)
        except: pass

        pts_before, syp_added, pts_after = convert_points_to_balance(user_id)
        if syp_added <= 0:
            try: bot.answer_callback_query(call.id, "ูุง ุชูุฌุฏ ููุงุท ูุงููุฉ ููุชุญููู.", show_alert=True)
            except: pass
            return
        bot.send_message(
            chat_id,
            f"๐ณ ุชู ุชุญููู <b>{pts_before}</b> ููุทุฉ ุฅูู <b>{syp_added}</b> ู.ุณ.\n"
            f"ููุงุทู ุงูุขู: <b>{pts_after}</b>.",
            parse_mode="HTML"
        )

    # ุนุฑุถ ุงูููุงุท + ุฑุตูุฏ ุงููุญูุธุฉ
    @bot.callback_query_handler(func=lambda c: c.data == "quiz_points")
    def on_points(call):
        user_id = call.from_user.id
        settings = load_settings()
        bal, pts = get_wallet(user_id)
        syp_val  = get_points_value_syp(pts, settings)
        try:
            bot.answer_callback_query(
                call.id,
                f"๐ ููุงุทู: {pts} (โ {syp_val} ู.ุณ)\n๐ฐ ุฑุตูุฏ ุงููุญูุธุฉ: {bal} ู.ุณ",
                show_alert=False
            )
        except:
            pass

    # ุดุฑุญ ุงููุนุจุฉ (ุจุฏูู ุนุฏูุงุฏ)
    @bot.callback_query_handler(func=lambda c: c.data == "quiz_help")
    def on_help(call):
        try: bot.answer_callback_query(call.id)
        except: pass
        settings = load_settings()
        price_hint = get_attempt_price(1, settings)
        msg = (
            "โน๏ธ <b>ุดุฑุญ ุงููุนุจุฉ</b>\n"
            "โข ูุฏูู ูค ุฎูุงุฑุงุช ููู ุณุคุงู.\n"
            "โข ุนูุฏ ุถุบุท ยซุงุจุฏุฃ ุงูุขู/ุงูุชุงููยป ููุฎุตู ุซูู <b>ุงููุญุงููุฉ ุงูุฃููู</b> ููุฑูุง.\n"
            "โข ุงูุฅุฌุงุจุฉ ุงูุฎุงุทุฆุฉ = ุฎุตู ุฌุฏูุฏ ุนูุฏ ยซุฅุนุงุฏุฉ ุงููุญุงููุฉยป ูููุณ ุงูุณุคุงู.\n"
            "โข ูุง ูุนุฑุถ ุฃู ุชูููุญ ููุฅุฌุงุจุฉ ุงูุตุญูุญุฉ.\n"
            f"โข ูุซุงู ุงูุณุนุฑ (ูุฑุญูุฉ 1): {price_hint} ู.ุณ/ูุญุงููุฉ (ูุงุจู ููุชุบููุฑ ุญุณุจ ุงููุฑุญูุฉ)."
        )
        bot.send_message(call.message.chat.id, msg, parse_mode="HTML")

    # ุฅููุงู ูุคูุช: ุฑุฌูุน ูุจุฏุงูุฉ ุฒุฑ ุงูุญุฒุงุฒูุฑ
    @bot.callback_query_handler(func=lambda c: c.data == "quiz_pause")
    def on_pause(call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        try: bot.answer_callback_query(call.id, "ุชู ุงูุญูุธ. ุฑุฌุนูุงู ูุจุฏุงูุฉ ุงูุฒุฑ.")
        except: pass

        st = user_quiz_state.get(user_id, {}) or {}
        # ุงุญุฐู ุฑุณุงูุฉ ุงููุชูุฌุฉ ุงูุฃุฎูุฑุฉ ุฅู ูุฌุฏุช
        _delete_if_exists(bot, chat_id, st.get("last_info_msg_id"))
        st.pop("last_info_msg_id", None)
        user_quiz_state[user_id] = st

        _intro_screen(bot, chat_id, user_id, resume_only=False)

    # ุฅูุบุงุก ูู ุงูุดุงุดุฉ ุงูุชูููุฏูุฉ
    @bot.callback_query_handler(func=lambda c: c.data == "quiz_cancel")
    def on_cancel(call):
        try: bot.answer_callback_query(call.id, "ุชู ุงูุฅูุบุงุก.")
        except: pass
        try: bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        except: pass
