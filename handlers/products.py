# handlers/products.py                                                                                      # handlers/products.py

from services.products_admin import get_product_active
import logging
import math
from database.db import get_table
from telebot import types
from services.system_service import is_maintenance, maintenance_message
from services.wallet_service import (
    register_user_if_not_exist,
    get_balance,
    get_available_balance,
    create_hold,   # โ ุญุฌุฒ ุฐุฑูู
)
from config import BOT_NAME
from handlers import keyboards
from services.queue_service import process_queue, add_pending_request
from database.models.product import Product

# (ุฌุฏูุฏ) ููุงุบุงุช ุงููุฒุงูุง ููููุชุฌุงุช ุงููุฑุฏูุฉ
from services.feature_flags import is_feature_enabled  # ูุณุชุฎุฏูู ูุชุนุทูู ููุชุฌ ูุนููู (ูุซู 660 ุดุฏุฉ)

# ุญุงุฑุณ ุงูุชุฃููุฏ ุงูููุญูุฏ: ูุญุฐู ุงูููุจูุฑุฏ + ูุนูู Debounce
try:
    from services.ui_guards import confirm_guard
except Exception:
    from ui_guards import confirm_guard

# ==== Helpers ููุฑุณุงุฆู ุงูููุญุฏุฉ ====
BAND = "โโโโโโโโโโโโโโโโ"
CANCEL_HINT = "โ ุงูุชุจ /cancel ููุฅูุบุงุก ูู ุฃู ููุช."
ETA_TEXT = "ูู 1 ุฅูู 4 ุฏูุงุฆู"
PAGE_SIZE_PRODUCTS = 6  # โ ุนุฑุถ ูู ุงูููุชุฌุงุช ุจุงูุตูุญุงุช ุจุฏูุงู ูู ุธููุฑ 3 ููุท

def _name_from_user(u) -> str:
    n = getattr(u, "first_name", None) or getattr(u, "full_name", None) or ""
    n = (n or "").strip()
    return n if n else "ุตุฏูููุง"

def _fmt_syp(n: int) -> str:
    try:
        return f"{int(n):,} ู.ุณ"
    except Exception:
        return f"{n} ู.ุณ"

def _with_cancel(text: str) -> str:
    return f"{text}\n\n{CANCEL_HINT}"

def _card(title: str, lines: list[str]) -> str:
    body = "\n".join(lines)
    return f"{BAND}\n{title}\n{body}\n{BAND}"

def _unavailable_short(product_name: str) -> str:
    # ุชูููู ุงุญุชุฑุงูู ูุธูุฑ ูู Alert ุนูุฏูุง ูููู ุงูููุชุฌ ููููููุง
    return (
        f"โ ุนุฐุฑูุงุ ยซ{product_name}ยป ุบูุฑ ูุชุงุญ ุญุงูููุง ุจุณุจุจ ุตูุงูุฉ ุฃู ููุงุฏ ุงููููุฉ.\n"
        f"ุณููุนูุฏ ูุชุญู ุจุฃุณุฑุน ููุช ูููู. ุดูุฑูุง ูุชููููู ๐ค"
    )

# ================= (ุฌุฏูุฏ) ุชุญููู ุชูุตููู ON/OFF ููู ุฒุฑ ูููุฉ =================
# ูุณุชุฎุฏู ุฌุฏูู features ููุณู ุจููุงุชูุญ ููุณููุฉ ููู ุฎูุงุฑ (SKU)
_FEATURES_TABLE = "features"

def _features_tbl():
    return get_table(_FEATURES_TABLE)

def _slug(s: str) -> str:
    return (s or "").strip().replace(" ", "-").replace("ู", "-").lower()

def key_product_option(category: str, product_name: str) -> str:
    # ูุซุงู: product:pubg:60-ุดุฏุฉ  /  product:freefire:310-ุฌููุฑุฉ
    return f"product:{_slug(category)}:{_slug(product_name)}"

def ensure_feature(key: str, label: str, default_active: bool = True) -> None:
    """ูุฒุฑุน ุงูุณุทุฑ ูู features ุฅู ูู ููุฌุฏ (idempotent)ุ ููุญุฏูุซ label ุฅู ุชุบููุฑ."""
    try:
        r = _features_tbl().select("key").eq("key", key).limit(1).execute()
        if not getattr(r, "data", None):
            _features_tbl().insert({"key": key, "label": label, "active": bool(default_active)}).execute()
        else:
            _features_tbl().update({"label": label}).eq("key", key).execute()
    except Exception as e:
        logging.exception("[products] ensure_feature failed: %s", e)

def is_option_enabled(category: str, product_name: str, default: bool = True) -> bool:
    """ูุฑุฌุน ุญุงูุฉ ุงูุชูุนูู ูุฒุฑ ุงููููุฉ ุงููุญุฏูุฏ."""
    try:
        return is_feature_enabled(key_product_option(category, product_name), default)
    except Exception:
        return default

def require_option_or_alert(bot, chat_id: int, category: str, product_name: str) -> bool:
    """ุฅู ูุงู ุงูุฒุฑ ููููู ูุฑุณู ุงุนุชุฐุงุฑ ููุฑุฌุน True (ูุนูู ูู)."""
    if is_option_enabled(category, product_name, True):
        return False
    try:
        bot.send_message(
            chat_id,
            _with_cancel(
                f"โ ุนุฐุฑูุงุ ยซ{product_name}ยป ุบูุฑ ูุชุงุญ ุญุงูููุง (ููุงุฏ ุงููููุฉ/ุตูุงูุฉ).\n"
                f"ูุนูู ุนูู ุฅุนุงุฏุชู ูู ุฃุณุฑุน ููุช. ุดูุฑูุง ูุชููููู ๐ค"
            )
        )
    except Exception:
        pass
    return True

# ุญุงูุฉ ุงูุทูุจุงุช ููู ูุณุชุฎุฏู (ููุฎุทูุงุช ููุทุ ูุด ููุน ุชุนุฏุฏ ุงูุทูุจุงุช)
user_orders = {}

def has_pending_request(user_id: int) -> bool:
    """ุชุฑุฌุน True ุฅุฐุง ูุงู ูุฏู ุงููุณุชุฎุฏู ุทูุจ ููุฏ ุงูุงูุชุธุงุฑ (ููุฌูุฏุฉ ููุชูุงููุ ูุด ุจูููุน ุชุนุฏุฏ ุงูุทูุจุงุช)."""
    res = (
        get_table("pending_requests")
        .select("id")
        .eq("user_id", user_id)
        .execute()
    )
    return bool(res.data)

# ============= ุชุนุฑูู ุงูููุชุฌุงุช =============
PRODUCTS = {
    "PUBG": [
        Product(1, "60 ุดุฏุฉ", "ุฃูุนุงุจ", 0.89, "ุฒุฑ 60 ุดุฏุฉ"),
        Product(2, "325 ุดุฏุฉ", "ุฃูุนุงุจ", 4.44, "ุฒุฑ 325 ุดุฏุฉ"),
        Product(3, "660 ุดุฏุฉ", "ุฃูุนุงุจ", 8.85, "ุฒุฑ 660 ุดุฏุฉ"),
        Product(4, "1800 ุดุฏุฉ", "ุฃูุนุงุจ", 22.09, "ุฒุฑ 1800 ุดุฏุฉ"),
        Product(5, "3850 ุดุฏุฉ", "ุฃูุนุงุจ", 43.24, "ุฒุฑ 3850 ุดุฏุฉ"),
        Product(6, "8100 ุดุฏุฉ", "ุฃูุนุงุจ", 86.31, "ุฒุฑ 8100 ุดุฏุฉ"),
    ],
    "FreeFire": [
        Product(7, "100 ุฌููุฑุฉ", "ุฃูุนุงุจ", 0.98, "ุฒุฑ 100 ุฌููุฑุฉ"),
        Product(8, "310 ุฌููุฑุฉ", "ุฃูุนุงุจ", 2.49, "ุฒุฑ 310 ุฌููุฑุฉ"),
        Product(9, "520 ุฌููุฑุฉ", "ุฃูุนุงุจ", 4.13, "ุฒุฑ 520 ุฌููุฑุฉ"),
        Product(10, "1060 ุฌููุฑุฉ", "ุฃูุนุงุจ", 9.42, "ุฒุฑ 1060 ุฌููุฑุฉ"),
        Product(11, "2180 ุฌููุฑุฉ", "ุฃูุนุงุจ", 18.84, "ุฒุฑ 2180 ุฌููุฑุฉ"),
        Product(18, "ุนุถููุฉ ุฃุณุจูุน", "ุฃูุนุงุจ", 3.60, "ุนุถููุฉ ุฃุณุจูุน ูุฑู ูุงูุฑ"),
        Product(19, "ุนุถููุฉ ุดูุฑ",  "ุฃูุนุงุจ", 13.00, "ุนุถููุฉ ุดูุฑ ูุฑู ูุงูุฑ"),
    ],
    "Jawaker": [
        Product(12, "10000 ุชูููุฒ", "ุฃูุนุงุจ", 1.34, "ุฒุฑ 10000 ุชูููุฒ"),
        Product(13, "15000 ุชูููุฒ", "ุฃูุนุงุจ", 2.01, "ุฒุฑ 15000 ุชูููุฒ"),
        Product(14, "20000 ุชูููุฒ", "ุฃูุนุงุจ", 2.68, "ุฒุฑ 20000 ุชูููุฒ"),
        Product(15, "30000 ุชูููุฒ", "ุฃูุนุงุจ", 4.02, "ุฒุฑ 30000 ุชูููุฒ"),
        Product(16, "60000 ุชูููุฒ", "ุฃูุนุงุจ", 8.04, "ุฒุฑ 60000 ุชูููุฒ"),
        Product(17, "120000 ุชูููุฒ", "ุฃูุนุงุจ", 16.08, "ุฒุฑ 120000 ุชูููุฒ"),
    ],
}

def convert_price_usd_to_syp(usd):
    # โ ุชูููุฐ ุดุฑุทู: ุชุญููู ูุฑุฉ ูุงุญุฏุฉ + round() ุซู int (ุจุฏูู ููุงุตู ุนุดุฑูุฉ)
    if usd <= 5:
        return int(round(usd * 11800))
    elif usd <= 10:
        return int(round(usd * 11600))
    elif usd <= 20:
        return int(round(usd * 11300))
    return int(round(usd * 11000))

def _button_label(p: Product) -> str:
    # ุงุณู ุงูุฒุฑ + ุงูุณุนุฑ ุจุงูุฏููุงุฑ
    try:
        return f"{p.name} โ ${float(p.price):.2f}"
    except Exception:
        return f"{p.name}"

def _build_products_keyboard(category: str, page: int = 0):
    """ููุญุฉ ููุชุฌุงุช ูุน ุตูุญุงุช + ุฅุจุฑุงุฒ ุงูููุชุฌุงุช ุงููููููุฉ + (ุฌุฏูุฏ) ููุงุบ ููู ูููุฉ."""
    options = PRODUCTS.get(category, [])
    total = len(options)

    # ๐ฑ ุฒุฑุน ููุงุชูุญ features ููู ุฒุฑ ูููุฉ (ุชุธูุฑ ุนูุฏ ุงูุฅุฏูู ูุฅููุงู ุฎูุงุฑ ูุญุฏุฏ)
    for p in options:
        try:
            ensure_feature(
                key_product_option(category, p.name),
                f"{category} โ {p.name}",
                default_active=True
            )
        except Exception:
            pass

    pages = max(1, math.ceil(total / PAGE_SIZE_PRODUCTS))
    page = max(0, min(page, pages - 1))
    start = page * PAGE_SIZE_PRODUCTS
    end = start + PAGE_SIZE_PRODUCTS
    slice_items = options[start:end]

    kb = types.InlineKeyboardMarkup(row_width=2)

    for p in slice_items:
        # ูุนุงู ุนูู ูุณุชูู ุงูููุชุฌ ุงูุนุงู + ูุนุงู ุนูู ูุณุชูู ูุฐุง ุงูุฎูุงุฑุ
        try:
            active_global = bool(get_product_active(p.product_id))
        except Exception:
            active_global = True

        active_option = is_option_enabled(category, p.name, True)
        active = active_global and active_option

        if active:
            # ุฒุฑ ุนุงุฏู ูุงุฎุชูุงุฑ ุงูููุชุฌ
            kb.add(types.InlineKeyboardButton(_button_label(p), callback_data=f"select_{p.product_id}"))
        else:
            # ูุนุฑุถู ููู ูููููู โ ููุนุทู Alert ุนูุฏ ุงูุถุบุท
            try:
                label = f"๐ด {p.name} โ ${float(p.price):.2f} (ููููู)"
            except Exception:
                label = f"๐ด {p.name} (ููููู)"
            kb.add(types.InlineKeyboardButton(label, callback_data=f"prod_inactive:{p.product_id}"))

    # ุดุฑูุท ุชูููู
    nav = []
    if page > 0:
        nav.append(types.InlineKeyboardButton("โ๏ธ", callback_data=f"prodpage:{category}:{page-1}"))
    nav.append(types.InlineKeyboardButton(f"{page+1}/{pages}", callback_data="prodnoop"))
    if page < pages - 1:
        nav.append(types.InlineKeyboardButton("โถ๏ธ", callback_data=f"prodpage:{category}:{page+1}"))
    if nav:
        kb.row(*nav)

    # ุฃุฒุฑุงุฑ ูุณุงุนุฏุฉ ูุฎุชุตุฑุฉ
    kb.add(types.InlineKeyboardButton("๐ณ ุทุฑู ุงูุฏูุน/ุงูุดุญู", callback_data="show_recharge_methods"))
    kb.add(types.InlineKeyboardButton("โฌ๏ธ ุฑุฌูุน", callback_data="back_to_categories"))
    return kb, pages

# ================= ูุงุฌูุงุช ุงูุนุฑุถ =================

def show_products_menu(bot, message):
    name = _name_from_user(message.from_user)
    txt = _with_cancel(f"๐ ุฃููุงู {name}! ุงุฎุชุงุฑ ููุน ุงูููุชุฌ ุงููู ููุงุณุจู ๐")
    bot.send_message(message.chat.id, txt, reply_markup=keyboards.products_menu())

def show_game_categories(bot, message):
    name = _name_from_user(message.from_user)
    txt = _with_cancel(f"๐ฎ ูุง {name}ุ ุงุฎุชุงุฑ ุงููุนุจุฉ ุฃู ุงูุชุทุจูู ุงููู ูุญุชุงุฌู:")
    bot.send_message(message.chat.id, txt, reply_markup=keyboards.game_categories())

def show_product_options(bot, message, category):
    # โฌ๏ธ ุงูุขู ูุน ุตูุญุงุช + ุนุฑุถ ูู ุงูููุชุฌุงุช (ุญุชู ุงููููููุฉ ุจุนูุงูุฉ ๐ด)
    keyboard, pages = _build_products_keyboard(category, page=0)
    bot.send_message(
        message.chat.id,
        _with_cancel(f"๐ฆ ููุชุฌุงุช {category}: (ุตูุญุฉ 1/{pages}) โ ุงุฎุชุงุฑ ุงููู ุนูู ูุฒุงุฌู ๐"),
        reply_markup=keyboard
    )

# ================= ุฎุทูุงุช ุฅุฏุฎุงู ุขูุฏู ุงููุงุนุจ =================

def handle_player_id(message, bot):
    user_id = message.from_user.id
    player_id = (message.text or "").strip()
    name = _name_from_user(message.from_user)

    order = user_orders.get(user_id)
    if not order or "product" not in order:
        bot.send_message(user_id, f"โ {name}ุ ูุง ุนูุฏูุง ุทูุจ ุดุบูุงู ุฏูููุชู. ุงุฎุชุงุฑ ุงูููุชุฌ ูุงุจุฏุฃ ูู ุฌุฏูุฏ.")
        return

    product = order["product"]

    # ๐ ุชุญููู ุณุฑูุน: ูุฏ ูููู ุงูุฅุฏูู ุฃููู ุฎูุงุฑ ุงููููุฉ ุจุนุฏ ูุง ุงุฎุชุฑุชู
    if require_option_or_alert(bot, user_id, order.get("category", ""), product.name):
        return

    order["player_id"] = player_id
    price_syp = convert_price_usd_to_syp(product.price)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("โ ุชูุงู.. ุฃููุฏ ุงูุทูุจ", callback_data="final_confirm_order"),
        types.InlineKeyboardButton("โ๏ธ ุฃุนุฏูู ุงูุขูุฏู", callback_data="edit_player_id"),
        types.InlineKeyboardButton("โ ุฅูุบุงุก", callback_data="cancel_order")
    )

    bot.send_message(
        user_id,
        _with_cancel(
            _card(
                "๐ฆ ุชูุงุตูู ุงูุทูุจ",
                [
                    f"โข ุงูููุชุฌ: {product.name}",
                    f"โข ุงููุฆุฉ: {product.category}",
                    f"โข ุงูุณุนุฑ: {_fmt_syp(price_syp)}",
                    f"โข ุขูุฏู ุงููุงุนุจ: {player_id}",
                    "",
                    f"ููุจุนุช ุงูุทูุจ ููุฅุฏุงุฑุฉุ ูุงูุญุฌุฒ ููุชู ููุฑูุง. ุงูุชูููุฐ {ETA_TEXT} ุจุฅุฐู ุงููู.",
                    "ุชูุฏุฑ ุชุนูู ุทูุจุงุช ุชุงููุฉ ุจุฑุถู โ ุจูุญุณุจ ูู ุงููุชุงุญ ุจุณ."
                ]
            )
        ),
        reply_markup=keyboard
    )

# ================= ุชุณุฌูู ูุงูุฏูุฑุงุช ุงูุฑุณุงุฆู =================

def register_message_handlers(bot, history):
    # /cancel โ ุฅูุบุงุก ุณุฑูุน ูู ุฃู ุฎุทูุฉ
    @bot.message_handler(commands=['cancel'])
    def cancel_cmd(msg):
        uid = msg.from_user.id
        user_orders.pop(uid, None)
        name = _name_from_user(msg.from_user)
        bot.send_message(
            msg.chat.id,
            _card("โ ุชู ุงูุฅูุบุงุก", [f"ูุง {name}ุ ุฑุฌุนูุงู ููุงุฆูุฉ ุงูููุชุฌุงุช."]),
            reply_markup=keyboards.products_menu()
        )

    @bot.message_handler(func=lambda msg: msg.text in ["๐ ุงูููุชุฌุงุช", "๐ผ ุงูููุชุฌุงุช"])
    def handle_main_product_menu(msg):
        user_id = msg.from_user.id
        register_user_if_not_exist(user_id, msg.from_user.full_name)
        val = history.get(user_id)
        if val is None:
            history[user_id] = ["products_menu"]
        elif isinstance(val, list):
            history[user_id].append("products_menu")
        elif isinstance(val, str):
            history[user_id] = [val, "products_menu"]
        else:
            history[user_id] = ["products_menu"]

        show_products_menu(bot, msg)

    @bot.message_handler(func=lambda msg: msg.text == "๐ฎ ุดุญู ุฃูุนุงุจ ู ุชุทุจููุงุช")
    def handle_games_menu(msg):
        user_id = msg.from_user.id
        register_user_if_not_exist(user_id, msg.from_user.full_name)
        val = history.get(user_id)
        if val is None:
            history[user_id] = ["games_menu"]
        elif isinstance(val, list):
            history[user_id].append("games_menu")
        elif isinstance(val, str):
            history[user_id] = [val, "games_menu"]
        else:
            history[user_id] = ["games_menu"]
        show_game_categories(bot, msg)

    @bot.message_handler(func=lambda msg: msg.text in [
        "๐ฏ ุดุญู ุดุฏุงุช ุจุจุฌู ุงูุนุงูููุฉ",
        "๐ฅ ุดุญู ุฌูุงูุฑ ูุฑู ูุงูุฑ",
        "๐ ุชุทุจูู ุฌูุงูุฑ"
    ])
    def game_handler(msg):
        user_id = msg.from_user.id
        register_user_if_not_exist(user_id, msg.from_user.full_name)

        if is_maintenance():
            try:
                bot.send_message(msg.chat.id, maintenance_message())
            finally:
                return

        category_map = {
            "๐ฏ ุดุญู ุดุฏุงุช ุจุจุฌู ุงูุนุงูููุฉ": "PUBG",
            "๐ฅ ุดุญู ุฌูุงูุฑ ูุฑู ูุงูุฑ": "FreeFire",
            "๐ ุชุทุจูู ุฌูุงูุฑ": "Jawaker"
        }
        category = category_map[msg.text]
        history.setdefault(user_id, []).append("product_options")
        user_orders[user_id] = {"category": category}
        show_product_options(bot, msg, category)

# ================= ุชุณุฌูู ูุงูุฏูุฑุงุช ุงููููุจุงู =================

def setup_inline_handlers(bot, admin_ids):
    @bot.callback_query_handler(func=lambda c: c.data.startswith("select_"))
    def on_select_product(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        product_id = int(call.data.split("_", 1)[1])

        # ุงุจุญุซ ุนู ุงูููุชุฌ
        selected = None
        selected_category = None
        for cat, items in PRODUCTS.items():
            for p in items:
                if p.product_id == product_id:
                    selected = p
                    selected_category = cat
                    break
            if selected:
                break
        if not selected:
            return bot.answer_callback_query(call.id, f"โ {name}ุ ุงูููุชุฌ ูุด ููุฌูุฏ. ุฌุฑูุจ ุชุงูู.")

        # โ ููุน ุงุฎุชูุงุฑ ููุชุฌ ููููู (ุนุงููุง ุฃู ูุฎูุงุฑ ูุญุฏูุฏ)
        if not get_product_active(product_id):
            return bot.answer_callback_query(call.id, _unavailable_short(selected.name), show_alert=True)
        if require_option_or_alert(bot, call.message.chat.id, selected_category or "", selected.name):
            return bot.answer_callback_query(call.id)

        user_orders[user_id] = {"category": selected_category or selected.category, "product": selected}
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("โฌ๏ธ ุฑุฌูุน", callback_data="back_to_products"))
        msg = bot.send_message(user_id, _with_cancel(f"๐ก ูุง {name}ุ ุงุจุนุช ุขูุฏู ุงููุงุนุจ ูู ุณูุญุช:"), reply_markup=kb)
        bot.register_next_step_handler(msg, handle_player_id, bot)

    # โ ุนุฑุถ ุตูุญุฉ ุฌุฏูุฏุฉ ูู ุงูููุชุฌุงุช
    @bot.callback_query_handler(func=lambda c: c.data.startswith("prodpage:"))
    def _paginate_products(call):
        try:
            _, category, page_str = call.data.split(":", 2)
            page = int(page_str)
        except Exception:
            return bot.answer_callback_query(call.id)
        kb, pages = _build_products_keyboard(category, page=page)
        try:
            bot.edit_message_text(
                _with_cancel(f"๐ฆ ููุชุฌุงุช {category}: (ุตูุญุฉ {page+1}/{pages}) โ ุงุฎุชุงุฑ ุงููู ุนูู ูุฒุงุฌู ๐"),
                call.message.chat.id,
                call.message.message_id,
                reply_markup=kb
            )
        except Exception:
            bot.send_message(
                call.message.chat.id,
                _with_cancel(f"๐ฆ ููุชุฌุงุช {category}: (ุตูุญุฉ {page+1}/{pages}) โ ุงุฎุชุงุฑ ุงููู ุนูู ูุฒุงุฌู ๐"),
                reply_markup=kb
            )
        bot.answer_callback_query(call.id)

    # โ ุถุบุท ุนูู ููุชุฌ ููููู โ ูุนุทู ุชูุจูู ููุท
    @bot.callback_query_handler(func=lambda c: c.data.startswith("prod_inactive:"))
    def _inactive_alert(call):
        pid = int(call.data.split(":", 1)[1])
        # ุงูุนุซูุฑ ุนูู ุงูุงุณู ููุฑุณุงูุฉ
        name = None
        for items in PRODUCTS.values():
            for p in items:
                if p.product_id == pid:
                    name = p.name
                    break
            if name:
                break
        bot.answer_callback_query(call.id, _unavailable_short(name or "ุงูููุชุฌ"), show_alert=True)

    @bot.callback_query_handler(func=lambda c: c.data == "prodnoop")
    def _noop(call):
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data == "show_recharge_methods")
    def _show_recharge(call):
        try:
            bot.send_message(call.message.chat.id, "๐ณ ุงุฎุชุงุฑ ุทุฑููุฉ ุดุญู ูุญูุธุชู:", reply_markup=keyboards.recharge_menu())
        except Exception:
            bot.send_message(call.message.chat.id, "๐ณ ูุนุฑุถ ุทุฑู ุงูุดุญูุ ุงูุชุญ ูุงุฆูุฉ ุงูุดุญู ูู ุงูุฑุฆูุณูุฉ.")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data == "back_to_products")
    def back_to_products(call):
        user_id = call.from_user.id
        category = user_orders.get(user_id, {}).get("category")
        if category:
            kb, pages = _build_products_keyboard(category, page=0)
            try:
                bot.edit_message_text(
                    _with_cancel(f"๐ฆ ููุชุฌุงุช {category}: (ุตูุญุฉ 1/{pages}) โ ุงุฎุชุงุฑ ุงููู ุนูู ูุฒุงุฌู ๐"),
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=kb
                )
            except Exception:
                bot.send_message(
                    call.message.chat.id,
                    _with_cancel(f"๐ฆ ููุชุฌุงุช {category}: (ุตูุญุฉ 1/{pages}) โ ุงุฎุชุงุฑ ุงููู ุนูู ูุฒุงุฌู ๐"),
                    reply_markup=kb
                )

    @bot.callback_query_handler(func=lambda c: c.data == "back_to_categories")
    def back_to_categories(call):
        show_game_categories(bot, call.message)

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_order")
    def cancel_order(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        user_orders.pop(user_id, None)
        bot.send_message(user_id, f"โ ุชู ุฅูุบุงุก ุงูุทูุจ ูุง {name}. ุจูุฌููุฒูู ุนุฑูุถ ุฃุญูู ุงููุฑุฉ ุงูุฌุงูุฉ ๐ค", reply_markup=keyboards.products_menu())

    @bot.callback_query_handler(func=lambda c: c.data == "edit_player_id")
    def edit_player_id(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("โฌ๏ธ ุฑุฌูุน", callback_data="back_to_products"))
        msg = bot.send_message(user_id, _with_cancel(f"๐ ูุง {name}ุ ุงุจุนุช ุขูุฏู ุงููุงุนุจ ุงูุฌุฏูุฏ:"), reply_markup=kb)
        bot.register_next_step_handler(msg, handle_player_id, bot)

    @bot.callback_query_handler(func=lambda c: c.data == "final_confirm_order")
    def final_confirm_order(call):
        user_id = call.from_user.id

        # โ ุงุญุฐู ุงูููุจูุฑุฏ ููุท + ุงููุน ุงูุฏุจู-ูููู (ุจุฏูู ุญุฐู ุงูุฑุณุงูุฉ)
        if confirm_guard(bot, call, "final_confirm_order"):
            return

        name = _name_from_user(call.from_user)
        order = user_orders.get(user_id)
        if not order or "product" not in order or "player_id" not in order:
            return bot.answer_callback_query(call.id, f"โ {name}ุ ุงูุทูุจ ูุด ูุงูู. ูููู ุงูุจูุงูุงุช ุงูุฃูู.")

        product   = order["product"]
        player_id = order["player_id"]
        price_syp = convert_price_usd_to_syp(product.price)

        # ุงูููุชุฌ ูุง ุฒุงู ูุนูุงูุ (Alert ุจุฑุณุงูุฉ ุงุญุชุฑุงููุฉ)
        if not get_product_active(product.product_id):
            return bot.answer_callback_query(call.id, _unavailable_short(product.name), show_alert=True)

        # ๐ ุงูุฎูุงุฑ ููุณู ูุง ุฒุงู ููุนููุ (ูุซูุงู: 660 ุดุฏุฉ ููููุฉ)
        if require_option_or_alert(bot, call.message.chat.id, order.get("category", ""), product.name):
            return bot.answer_callback_query(call.id)

        # ุชุญูู ุงูุฑุตูุฏ (ุงููุชุงุญ ููุท)
        available = get_available_balance(user_id)
        if available < price_syp:
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("๐ณ ุทุฑู ุงูุฏูุน/ุงูุดุญู", callback_data="show_recharge_methods"))
            bot.send_message(
                user_id,
                _card(
                    "โ ุฑุตูุฏู ูุด ููููู",
                    [
                        f"ุงููุชุงุญ: {_fmt_syp(available)}",
                        f"ุงูุณุนุฑ: {_fmt_syp(price_syp)}",
                        "๐งพ ุงุดุญู ุงููุญูุธุฉ ูุจุนุฏูู ุฌุฑูุจ ุชุงูู."
                    ]
                ),
                reply_markup=kb
            )
            return

        # โ ุญุฌุฒ ุงููุจูุบ ูุนูููุง (HOLD)
        hold_id = None
        try:
            resp = create_hold(user_id, price_syp, f"ุญุฌุฒ ุดุฑุงุก โ {product.name} โ ุขูุฏู {player_id}")
            if getattr(resp, "error", None):
                err_msg = str(resp.error).lower()
                if "insufficient_funds" in err_msg or "amount must be > 0" in err_msg:
                    bot.send_message(
                        user_id,
                        _card(
                            "โ ุงูุฑุตูุฏ ุบูุฑ ูุงูู",
                            [f"ุงููุชุงุญ: {_fmt_syp(available)}", f"ุงูุณุนุฑ: {_fmt_syp(price_syp)}"]
                        )
                    )
                    return
                logging.error("create_hold RPC error: %s", resp.error)
                bot.send_message(user_id, "โ ูุง {name}ุ ุญุตู ุฎุทุฃ ุจุณูุท ุฃุซูุงุก ุงูุญุฌุฒ. ุฌุฑูุจ ููุงู ุดููุฉ.")
                return
            data = getattr(resp, "data", None)
            if isinstance(data, dict):
                hold_id = data.get("id") or data.get("hold_id")
            elif isinstance(data, (list, tuple)) and data:
                hold_id = data[0].get("id") if isinstance(data[0], dict) else data[0]
            else:
                hold_id = data
            if not hold_id:
                bot.send_message(user_id, f"โ ูุง {name}ุ ูุด ูุงุฏุฑูู ููุดุฆ ุงูุญุฌุฒ ุฏูููุชู. ุญุงูู ุชุงูู.")
                return
        except Exception as e:
            logging.exception("create_hold exception: %s", e)
            bot.send_message(user_id, f"โ ูุง {name}ุ ุญุตูุช ูุดููุฉ ุฃุซูุงุก ุงูุญุฌุฒ. ุญุงูู ุจุนุฏ ุดููุฉ.")
            return

        # ุนุฑุถ ุงูุฑุตูุฏ ุงูุญุงูู ูู ุฑุณุงูุฉ ุงูุฃุฏูู
        balance = get_balance(user_id)

        admin_msg = (
            f"๐ฐ ุฑุตูุฏ ุงููุณุชุฎุฏู: {balance:,} ู.ุณ\n"
            f"๐ ุทูุจ ุฌุฏูุฏ\n"
            f"๐ค ุงูุงุณู: <code>{call.from_user.full_name}</code>\n"
            f"ููุฒุฑ: <code>@{call.from_user.username or ''}</code>\n"
            f"ุขูุฏู: <code>{user_id}</code>\n"
            f"ุขูุฏู ุงููุงุนุจ: <code>{player_id}</code>\n"
            f"๐ ุงูููุชุฌ: {product.name}\n"
            f"ุงูุชุตููู: {product.category}\n"
            f"๐ต ุงูุณุนุฑ: {price_syp:,} ู.ุณ\n"
            f"(select_{product.product_id})"
        )

        # โ ุชูุฑูุฑ hold_id + ุงุณู ุงูููุชุฌ ุงูุญูููู ุฏุงุฎู ุงูู payload
        add_pending_request(
            user_id=user_id,
            username=call.from_user.username,
            request_text=admin_msg,
            payload={
                "type": "order",
                "product_id": product.product_id,
                "product_name": product.name,   # ููู ูุฑุณุงูุฉ ุงูุชูููุฐ ุจุงุณู ุงูููุชุฌ
                "player_id": player_id,
                "price": price_syp,
                "reserved": price_syp,
                "hold_id": hold_id
            }
        )

        # ุฑุณุงูุฉ ููุญูุฏุฉ ููุนููู ุจุนุฏ ุฅุฑุณุงู ุงูุทูุจ
        bot.send_message(
            user_id,
            _with_cancel(
                _card(
                    f"โ ุชูุงู ูุง {name}! ุทูุจู ุงุชุจุนุช ๐",
                    [
                        f"โฑ๏ธ ุงูุชูููุฐ {ETA_TEXT}.",
                        f"๐ฆ ุญุฌุฒูุง {_fmt_syp(price_syp)} ูุทูุจ ยซ{product.name}ยป ูุขูุฏู ยซ{player_id}ยป.",
                        "ุชูุฏุฑ ุชุจุนุช ุทูุจุงุช ุชุงููุฉ โ ุจูุณุญุจ ูู ุงููุชุงุญ ุจุณ."
                    ]
                )
            ),
        )
        process_queue(bot)

# ================= ููุทุฉ ุงูุชุณุฌูู ูู main.py =================

def register(bot, history, admin_ids=None):
    register_message_handlers(bot, history)
    setup_inline_handlers(bot, admin_ids=admin_ids or [])
