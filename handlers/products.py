# handlers/products.py

from services.products_admin import is_product_active
import logging
from database.db import get_table
from telebot import types
from services.system_service import is_maintenance, maintenance_message
from services.wallet_service import register_user_if_not_exist, get_balance, get_available_balance, create_hold
from config import BOT_NAME
from handlers import keyboards
from services.queue_service import process_queue, add_pending_request
from database.models.product import Product

# ==== Helpers ููุฑุณุงุฆู ุงูููุญุฏุฉ ====
def _name_from_user(u) -> str:
    n = getattr(u, "first_name", None) or getattr(u, "full_name", None) or ""
    n = (n or "").strip()
    return n if n else "ุตุฏูููุง"

def _fmt_syp(n: int) -> str:
    try:
        return f"{int(n):,} ู.ุณ"
    except Exception:
        return f"{n} ู.ุณ"

ETA_TEXT = "ูู 1 ุฅูู 4 ุฏูุงุฆู"

# ุญุงูุฉ ุงูุทูุจุงุช ููู ูุณุชุฎุฏู
user_orders = {}

def has_pending_request(user_id: int) -> bool:
    """ุชุฑุฌุน True ุฅุฐุง ูุงู ูุฏู ุงููุณุชุฎุฏู ุทูุจ ููุฏ ุงูุงูุชุธุงุฑ."""
    res = (
        get_table("pending_requests")
        .select("id")
        .eq("user_id", user_id)
        .execute()
    )
    return bool(res.data)

# ============= ุชุนุฑูู ุงูููุชุฌุงุช =============
PRODUCTS = {
    "PUBG": [
        Product(1, "60 ุดุฏุฉ", "ุฃูุนุงุจ", 0.89, "ุฒุฑ 60 ุดุฏุฉ"),
        Product(2, "325 ุดุฏุฉ", "ุฃูุนุงุจ", 4.44, "ุฒุฑ 325 ุดุฏุฉ"),
        Product(3, "660 ุดุฏุฉ", "ุฃูุนุงุจ", 8.85, "ุฒุฑ 660 ุดุฏุฉ"),
        Product(4, "1800 ุดุฏุฉ", "ุฃูุนุงุจ", 22.09, "ุฒุฑ 1800 ุดุฏุฉ"),
        Product(5, "3850 ุดุฏุฉ", "ุฃูุนุงุจ", 43.24, "ุฒุฑ 3850 ุดุฏุฉ"),
        Product(6, "8100 ุดุฏุฉ", "ุฃูุนุงุจ", 86.31, "ุฒุฑ 8100 ุดุฏุฉ"),
    ],
    "FreeFire": [
        Product(7, "100 ุฌููุฑุฉ", "ุฃูุนุงุจ", 0.98, "ุฒุฑ 100 ุฌููุฑุฉ"),
        Product(8, "310 ุฌููุฑุฉ", "ุฃูุนุงุจ", 2.49, "ุฒุฑ 310 ุฌููุฑุฉ"),
        Product(9, "520 ุฌููุฑุฉ", "ุฃูุนุงุจ", 4.13, "ุฒุฑ 520 ุฌููุฑุฉ"),
        Product(10, "1060 ุฌููุฑุฉ", "ุฃูุนุงุจ", 9.42, "ุฒุฑ 1060 ุฌููุฑุฉ"),
        Product(11, "2180 ุฌููุฑุฉ", "ุฃูุนุงุจ", 18.84, "ุฒุฑ 2180 ุฌููุฑุฉ"),
    ],
    "Jawaker": [
        Product(12, "10000 ุชูููุฒ", "ุฃูุนุงุจ", 1.34, "ุฒุฑ 10000 ุชูููุฒ"),
        Product(13, "15000 ุชูููุฒ", "ุฃูุนุงุจ", 2.01, "ุฒุฑ 15000 ุชูููุฒ"),
        Product(14, "20000 ุชูููุฒ", "ุฃูุนุงุจ", 2.68, "ุฒุฑ 20000 ุชูููุฒ"),
        Product(15, "30000 ุชูููุฒ", "ุฃูุนุงุจ", 4.02, "ุฒุฑ 30000 ุชูููุฒ"),
        Product(16, "60000 ุชูููุฒ", "ุฃูุนุงุจ", 8.04, "ุฒุฑ 60000 ุชูููุฒ"),
        Product(17, "120000 ุชูููุฒ", "ุฃูุนุงุจ", 16.08, "ุฒุฑ 120000 ุชูููุฒ"),
    ],
}

def convert_price_usd_to_syp(usd):
    if usd <= 5:
        return int(usd * 11800)
    elif usd <= 10:
        return int(usd * 11600)
    elif usd <= 20:
        return int(usd * 11300)
    return int(usd * 11000)

# ================= ูุงุฌูุงุช ุงูุนุฑุถ =================

def show_products_menu(bot, message):
    name = _name_from_user(message.from_user)
    bot.send_message(message.chat.id, f"๐ ุฃููุงู {name}! ุงุฎุชุงุฑ ููุน ุงูููุชุฌ ุงููู ููุงุณุจู ๐", reply_markup=keyboards.products_menu())

def show_game_categories(bot, message):
    name = _name_from_user(message.from_user)
    bot.send_message(message.chat.id, f"๐ฎ ูุง {name}ุ ุงุฎุชุงุฑ ุงููุนุจุฉ ุฃู ุงูุชุทุจูู ุงููู ูุญุชุงุฌู:", reply_markup=keyboards.game_categories())

def show_product_options(bot, message, category):
    options = PRODUCTS.get(category, [])
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    # ุงุณู ุงูุฒุฑ = ุงุณู ุงูููุชุฌ + ุงูุณุนุฑ ุจุงูุฏููุงุฑ
    for p in options:
        usd = f"{p.price:.2f}".rstrip("0").rstrip(".")
        label = f"{p.name} โ {usd}$"
        keyboard.add(types.InlineKeyboardButton(label, callback_data=f"select_{p.product_id}"))
    keyboard.add(types.InlineKeyboardButton("โฌ๏ธ ุฑุฌูุน", callback_data="back_to_categories"))
    bot.send_message(message.chat.id, f"๐ฆ ููุชุฌุงุช {category}: ุงุฎุชุงุฑ ุงููู ุนูู ูุฒุงุฌู ๐", reply_markup=keyboard)

# ================= ุฎุทูุงุช ุฅุฏุฎุงู ุขูุฏู ุงููุงุนุจ =================

def handle_player_id(message, bot):
    user_id = message.from_user.id
    player_id = (message.text or "").strip()
    name = _name_from_user(message.from_user)

    order = user_orders.get(user_id)
    if not order or "product" not in order:
        bot.send_message(user_id, f"โ {name}ุ ูุง ุนูุฏูุง ุทูุจ ุดุบูุงู ุฏูููุชู. ุงุฎุชุงุฑ ุงูููุชุฌ ูุงุจุฏุฃ ูู ุฌุฏูุฏ.")
        return

    order["player_id"] = player_id
    product = order["product"]
    price_syp = convert_price_usd_to_syp(product.price)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("โ ุชูุงู.. ุฃููุฏ ุงูุทูุจ", callback_data="final_confirm_order"),
        types.InlineKeyboardButton("โ๏ธ ุฃุนุฏูู ุงูุขูุฏู", callback_data="edit_player_id"),
        types.InlineKeyboardButton("โ ุฅูุบุงุก", callback_data="cancel_order")
    )

    bot.send_message(
        user_id,
        (
            f"ุชูุงู ูุง {name}! ๐\n"
            f"โข ุงูููุชุฌ: {product.name}\n"
            f"โข ุงููุฆุฉ: {product.category}\n"
            f"โข ุงูุณุนุฑ: {_fmt_syp(price_syp)}\n"
            f"โข ุขูุฏู ุงููุงุนุจ: {player_id}\n\n"
            f"ููุจุนุช ุงูุทูุจ ููุฅุฏุงุฑุฉ ูุงูุฎุตู ููุชู ุจุนุฏ ุงูููุงููุฉ.\n"
            f"ุจุนุฏ ุงูุชุฃููุฏ ูุด ูุชูุฏุฑ ุชุจุนุช ุทูุจ ุฌุฏูุฏ ุบูุฑ ููุง ูุฎููุต ุงูุญุงูู."
        ),
        reply_markup=keyboard
    )

# ================= ุชุณุฌูู ูุงูุฏูุฑุงุช ุงูุฑุณุงุฆู =================

def register_message_handlers(bot, history):
    @bot.message_handler(func=lambda msg: msg.text in ["๐ ุงูููุชุฌุงุช", "๐ผ ุงูููุชุฌุงุช"])
    def handle_main_product_menu(msg):
        user_id = msg.from_user.id
        register_user_if_not_exist(user_id, msg.from_user.full_name)
        val = history.get(user_id)
        if val is None:
            history[user_id] = ["products_menu"]
        elif isinstance(val, list):
            history[user_id].append("products_menu")
        elif isinstance(val, str):
            history[user_id] = [val, "products_menu"]
        else:
            history[user_id] = ["products_menu"]

        show_products_menu(bot, msg)

    @bot.message_handler(func=lambda msg: msg.text == "๐ฎ ุดุญู ุฃูุนุงุจ ู ุชุทุจููุงุช")
    def handle_games_menu(msg):
        user_id = msg.from_user.id
        register_user_if_not_exist(user_id, msg.from_user.full_name)
        val = history.get(user_id)
        if val is None:
            history[user_id] = ["games_menu"]
        elif isinstance(val, list):
            history[user_id].append("games_menu")
        elif isinstance(val, str):
            history[user_id] = [val, "games_menu"]
        else:
            history[user_id] = ["games_menu"]
        show_game_categories(bot, msg)

    @bot.message_handler(func=lambda msg: msg.text in [
        "๐ฏ ุดุญู ุดุฏุงุช ุจุจุฌู ุงูุนุงูููุฉ",
        "๐ฅ ุดุญู ุฌูุงูุฑ ูุฑู ูุงูุฑ",
        "๐ ุชุทุจูู ุฌูุงูุฑ"
    ])
    def game_handler(msg):
        user_id = msg.from_user.id
        register_user_if_not_exist(user_id, msg.from_user.full_name)

        if is_maintenance():
            try:
                bot.send_message(msg.chat.id, maintenance_message())
            finally:
                return

        category_map = {
            "๐ฏ ุดุญู ุดุฏุงุช ุจุจุฌู ุงูุนุงูููุฉ": "PUBG",
            "๐ฅ ุดุญู ุฌูุงูุฑ ูุฑู ูุงูุฑ": "FreeFire",
            "๐ ุชุทุจูู ุฌูุงูุฑ": "Jawaker"
        }
        category = category_map[msg.text]
        history.setdefault(user_id, []).append("product_options")
        user_orders[user_id] = {"category": category}
        show_product_options(bot, msg, category)

# ================= ุชุณุฌูู ูุงูุฏูุฑุงุช ุงููููุจุงู =================

def setup_inline_handlers(bot, admin_ids):
    @bot.callback_query_handler(func=lambda c: c.data.startswith("select_"))
    def on_select_product(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        product_id = int(call.data.split("_", 1)[1])

        # ุงุจุญุซ ุนู ุงูููุชุฌ
        selected = None
        for items in PRODUCTS.values():
            for p in items:
                if p.product_id == product_id:
                    selected = p
                    break
            if selected:
                break
        if not selected:
            return bot.answer_callback_query(call.id, f"โ {name}ุ ุงูููุชุฌ ูุด ููุฌูุฏ. ุฌุฑูุจ ุชุงูู.")

        # โ ููุน ุงุฎุชูุงุฑ ููุชุฌ ููููู
        if not is_product_active(product_id):
            return bot.answer_callback_query(call.id, f"โ {name}ุ ุงูููุชุฌ ูุชูููู ูุคูุชูุง.")

        user_orders[user_id] = {"category": selected.category, "product": selected}
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("โฌ๏ธ ุฑุฌูุน", callback_data="back_to_products"))
        msg = bot.send_message(user_id, f"๐ก ูุง {name}ุ ุงุจุนุช ุขูุฏู ุงููุงุนุจ ูู ุณูุญุช:", reply_markup=kb)
        bot.register_next_step_handler(msg, handle_player_id, bot)

    @bot.callback_query_handler(func=lambda c: c.data == "back_to_products")
    def back_to_products(call):
        user_id = call.from_user.id
        category = user_orders.get(user_id, {}).get("category")
        if category:
            show_product_options(bot, call.message, category)

    @bot.callback_query_handler(func=lambda c: c.data == "back_to_categories")
    def back_to_categories(call):
        show_game_categories(bot, call.message)

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_order")
    def cancel_order(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        user_orders.pop(user_id, None)
        bot.send_message(user_id, f"โ ุชู ุฅูุบุงุก ุงูุทูุจ ูุง {name}. ุจูุฌููุฒูู ุนุฑูุถ ุฃุญูู ุงููุฑุฉ ุงูุฌุงูุฉ ๐ค", reply_markup=keyboards.products_menu())

    @bot.callback_query_handler(func=lambda c: c.data == "edit_player_id")
    def edit_player_id(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("โฌ๏ธ ุฑุฌูุน", callback_data="back_to_products"))
        msg = bot.send_message(user_id, f"๐ ูุง {name}ุ ุงุจุนุช ุขูุฏู ุงููุงุนุจ ุงูุฌุฏูุฏ:", reply_markup=kb)
        bot.register_next_step_handler(msg, handle_player_id, bot)

    @bot.callback_query_handler(func=lambda c: c.data == "final_confirm_order")
    def final_confirm_order(call):
        user_id = call.from_user.id
        name = _name_from_user(call.from_user)
        order = user_orders.get(user_id)
        if not order or "product" not in order or "player_id" not in order:
            return bot.answer_callback_query(call.id, f"โ {name}ุ ุงูุทูุจ ูุด ูุงูู. ูููู ุงูุจูุงูุงุช ุงูุฃูู.")

        # โ ููุน ุงุฒุฏูุงุฌ ุงูุทูุจ
        if has_pending_request(user_id):
            return bot.answer_callback_query(call.id, f"โณ {name}ุ ุนูุฏู ุทูุจ ุฌุงุฑู. ูููููู ูุจุนุฏูู ุงุจุนุช ุงูุฌุฏูุฏ.")

        product   = order["product"]
        player_id = order["player_id"]
        price_syp = convert_price_usd_to_syp(product.price)

        # ุงูููุชุฌ ูุง ุฒุงู ูุนูุงูุ
        if not is_product_active(product.product_id):
            return bot.answer_callback_query(call.id, f"โ {name}ุ ุงูููุชุฌ ูุชูููู ูุคูุชูุง.")

        # ุชุญูู ุงูุฑุตูุฏ (ุงููุชุงุญ ููุท)
        available = get_available_balance(user_id)
        if available < price_syp:
            bot.send_message(
                user_id,
                f"โ {name}ุ ุฑุตูุฏู ุงููุชุงุญ ูุด ููููู.\n"
                f"ุงููุชุงุญ: {_fmt_syp(available)}\n"
                f"ุงูุณุนุฑ: {_fmt_syp(price_syp)}\n"
                f"๐งพ ุงุดุญู ุงููุญูุธุฉ ูุจุนุฏูู ุฌุฑูุจ ุชุงูู."
            )
            return

        # โ ุญุฌุฒ ุงููุจูุบ ูุนูููุง ุนุจุฑ RPC
        hold_id = None
        try:
            resp = create_hold(user_id, price_syp)  # TTL ุงูุงูุชุฑุงุถู
            if getattr(resp, "error", None):
                err_msg = str(resp.error).lower()
                if "insufficient_funds" in err_msg or "amount must be > 0" in err_msg:
                    bot.send_message(
                        user_id,
                        f"โ {name}ุ ุงูุฑุตูุฏ ูุด ููุงูุฉ ููุญุฌุฒ.\n"
                        f"ุงููุชุงุญ: {_fmt_syp(available)}\n"
                        f"ุงูุณุนุฑ: {_fmt_syp(price_syp)}"
                    )
                    return
                logging.error("create_hold RPC error: %s", resp.error)
                bot.send_message(user_id, f"โ ูุง {name}ุ ุญุตู ุฎุทุฃ ุจุณูุท ุฃุซูุงุก ุงูุญุฌุฒ. ุฌุฑูุจ ููุงู ุดููุฉ.")
                return
            hold_id = resp.data  # UUID
            if not hold_id:
                bot.send_message(user_id, f"โ ูุง {name}ุ ูุด ูุงุฏุฑูู ููุดุฆ ุงูุญุฌุฒ ุฏูููุชู. ุญุงูู ุชุงูู.")
                return
        except Exception as e:
            logging.exception("create_hold exception: %s", e)
            bot.send_message(user_id, f"โ ูุง {name}ุ ุญุตูุช ูุดููุฉ ุฃุซูุงุก ุงูุญุฌุฒ. ุญุงูู ุจุนุฏ ุดููุฉ.")
            return

        # ุนุฑุถ ุงูุฑุตูุฏ ุงูุญุงูู ูู ุฑุณุงูุฉ ุงูุฃุฏูู
        balance = get_balance(user_id)

        admin_msg = (
            f"๐ฐ ุฑุตูุฏ ุงููุณุชุฎุฏู: {balance:,} ู.ุณ\n"
            f"๐ ุทูุจ ุฌุฏูุฏ\n"
            f"๐ค ุงูุงุณู: <code>{call.from_user.full_name}</code>\n"
            f"ููุฒุฑ: <code>@{call.from_user.username or ''}</code>\n"
            f"ุขูุฏู: <code>{user_id}</code>\n"
            f"ุขูุฏู ุงููุงุนุจ: <code>{player_id}</code>\n"
            f"๐ ุงูููุชุฌ: {product.name}\n"
            f"ุงูุชุตููู: {product.category}\n"
            f"๐ต ุงูุณุนุฑ: {price_syp:,} ู.ุณ\n"
            f"(select_{product.product_id})"
        )

        # ุชูุฑูุฑ hold_id + ุงุณู ุงูููุชุฌ ุงูุญูููู ุฏุงุฎู ุงูู payload
        add_pending_request(
            user_id=user_id,
            username=call.from_user.username,
            request_text=admin_msg,
            payload={
                "type": "order",
                "product_id": product.product_id,
                "product_name": product.name,   # โ ููู ูุฑุณุงูุฉ ุงูุชูููุฐ
                "player_id": player_id,
                "price": price_syp,
                "reserved": price_syp,
                "hold_id": hold_id
            }
        )

        # ุฑุณุงูุฉ ููุญูุฏุฉ ููุนููู ุจุนุฏ ุฅุฑุณุงู ุงูุทูุจ
        bot.send_message(
            user_id,
            f"โ ุชูุงู ูุง {name}! ุจุนุชูุง ุทูุจู ููุฅุฏุงุฑุฉ.\n"
            f"โฑ๏ธ ุณูุชู ุชูููุฐ ุงูุทูุจ {ETA_TEXT}.\n"
            f"โน๏ธ ูุญุฏ ูุง ูุฎููุต ุงูุทูุจ ุฏูุ ูุด ูุชูุฏุฑ ุชุจุนุช ุทูุจ ุฌุฏูุฏ.\n"
            f"๐ฆ ุชูุงุตูู ุณุฑูุนุฉ: ุญุฌุฒูุง {_fmt_syp(price_syp)} ูุทูุจ ยซ{product.name}ยป ูุขูุฏู ุงููุงุนุจ ยซ{player_id}ยป.",
        )
        process_queue(bot)

# ================= ููุทุฉ ุงูุชุณุฌูู ูู main.py =================

def register(bot, history, admin_ids=None):
    global _MAINTENANCE_NOTICE
    _MAINTENANCE_NOTICE = True
    register_message_handlers(bot, history)
    setup_inline_handlers(bot, admin_ids=admin_ids or [])
